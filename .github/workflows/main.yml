name: CI/CD for Product Generator

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          cd backend
          pytest tests/ -v --tb=short
      
      - name: Log DVC Model Version
        run: |
          echo "=== DVC Model Tracking Info ==="
          if [ -f backend/models.dvc ]; then
            echo "DVC file exists - models are version controlled"
            cat backend/models.dvc
          else
            echo "Warning: models.dvc not found"
          fi

  deploy_to_space:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
     
      - name: Extract DVC Model Hash
        id: dvc_hash
        run: |
          if [ -f backend/models.dvc ]; then
            HASH=$(grep "md5:" backend/models.dvc | head -n 1 | awk '{print $2}')
            echo "hash=${HASH}" >> $GITHUB_OUTPUT
            echo "DVC Model Hash: ${HASH}"
          else
            echo "hash=unknown" >> $GITHUB_OUTPUT
          fi
     
      - name: Deploy to Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_SPACE_ID: ${{ secrets.HF_SPACE_ID }}
          DVC_HASH: ${{ steps.dvc_hash.outputs.hash }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          rm -rf hf-space-temp
          git clone https://user:${HF_TOKEN}@huggingface.co/spaces/${HF_SPACE_ID} hf-space-temp
          cd hf-space-temp
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          cp ../backend/Dockerfile ./
          cp ../backend/main.py ./
          cp ../backend/requirements.txt ./
          if [ -f ../backend/models.dvc ]; then cp ../backend/models.dvc ./; fi
          if [ -f ../backend/MODEL_VERSIONS.md ]; then cp ../backend/MODEL_VERSIONS.md ./; fi
          echo "---" > README.md
          echo "title: Product Description Generator" >> README.md
          echo "emoji: âœ¨" >> README.md
          echo "colorFrom: purple" >> README.md
          echo "colorTo: pink" >> README.md
          echo "sdk: docker" >> README.md
          echo "app_port: 8000" >> README.md
          echo "pinned: false" >> README.md
          echo "---" >> README.md
          echo "" >> README.md
          echo "# Product Description Generator" >> README.md
          echo "" >> README.md
          echo "AI-powered product description generator showcasing MLOps best practices." >> README.md
          echo "" >> README.md
          echo "## Features" >> README.md
          echo "- Text-based product description generation" >> README.md
          echo "- Image-based product description generation" >> README.md
          echo "- RESTful API with FastAPI" >> README.md
          echo "- Automated CI/CD pipeline" >> README.md
          echo "- Model version control with DVC" >> README.md
          echo "" >> README.md
          echo "## Model Information" >> README.md
          echo "- **Vision Model**: Salesforce/blip-image-captioning-large" >> README.md
          echo "- **Language Model**: google/gemma-2b-it" >> README.md
          echo "- **DVC Hash**: \`${DVC_HASH}\`" >> README.md
          echo "" >> README.md
          echo "## API Endpoints" >> README.md
          echo "- \`GET /\` - Welcome message with model info" >> README.md
          echo "- \`GET /health\` - Health check with model metadata" >> README.md
          echo "- \`POST /generate-description/\` - Generate from text attributes" >> README.md
          echo "- \`POST /generate-from-image/\` - Generate from uploaded image" >> README.md
          git add -A
          git commit -m "Deploy: ${GITHUB_SHA:0:7} | DVC: ${DVC_HASH:0:8}" || echo "No changes"
          git push --force origin main